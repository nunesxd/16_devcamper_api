Como o projeto foi iniciado anteriormente, sem antes termos documentado os procedimentos adotados por etapa, acreditamos ser interessante iniciar pelos comandos utilizados para que o projeto funcione como está, ou seja, a sua estrutura básica para o funcionamento.

Para o funcionamento do projeto, precisamos minimamente instalar os seguintes softwares: Mongodb Community Edition (base de dados em sí), Mongodb Compass (IDE para melhor interface com o banco), NodeJS (assim como as bibliotecas dependentes, como express, etc.), GIT. Também usamos o postman, que é um software para facilitar o envio e recebimento de dados via HTTP, para testar a ferramenta.

Para criar um projeto no NodeJS usamos o comando abaixo, com isso criamos o 'package.json' e o 'package-lock.json':
-- npm init
. OBS: 'package-lock.json' Dentre outros, é onde fica as dependencias do projeto, assim como o local de cada um.
. OBS 2: 'package.json' Dentre outros, é onde fica as configurações do projeto, como o principal arquivo do projeto (no caso o 'server.js'), e onde podemos colocar os scripts, como o que fizemos, o 'dev', que nos permite executar o site em ambiente de desenvolvimento. O comando de execução do script é:
-- npm run dev

No 'server.js', iremos trazer todos os módulos que desenvolvemos ao longo do projeto, carregá-los devidamente e inicar o site. É importante salientar que a ordem do carregamento dos módulos é importante, alguns módulos dependem de outros para funcionar.

Para que estes módulos sejam utilizados, eles precisam conter o trecho abaixo no final do módulo, exportando a funcionalidade que será importada nos demais módulos:
-- module.exports = [constante/variável criada];
O 'module.exports' é próprio do NodeJS.

Criamos a pasta 'config' e nela criamos o 'config.env', este arquivo será local por segurança e inserido no gitignore, ele irá conter as variáveis do ambiente, que serão usados nos demais módulos, através do código:
-- process.env.[variável do ambiente]
Criamos também o 'db.js', que contém os dados de conexão do banco de dados, utilizando o 'mongoose'.

No módulo 'db.js', como o connect do mongoose retorna uma promise, poderíamos usar o '.then()', mas com a estratégia que usamos (usando async), podemos pedir para o Node esperar o retorno do connect, evitando problemas de conexão (que no caso não deveriam acontecer muito, pois o banco será local).
Um outro problema que teríamos, seria em lidar com Unhandled errors das promises, poderíamos usar um try/catch no processo, mas optamos por lidar com os erros no 'server.js'.

Cabe mencionar que utilizamos uma dos seus melhores recursos, que é a execução assincrona, ou seja, criação de uma 'promisse', que irá retornar o valor processado quando este estiver pronto, sem impactar na execução do código.
-- const [constante/variavel] = async () => {}
Dentro da função devemos usar o 'await':
-- const conn = await mongoose.connect(process.env.MONGO_URI, { }

Nos módulos presentes nos 'controllers', que contém os métodos CRUD de nossa API, utilizamos um conceito de versionamento (v1, v2, dentro da URL), que possibilita continuar usando as versões anteriores simultâneamente.
. OBS: Anteriormente, fizemos um 'try/catch' dentro das funções CRUD async, mas identificamos que utilizando o método 'asyncHandler', do módulo 'async.js', podemos aproveitar o 'catch()' das Promises criadas, retirando assim possíveis repetições.

A próxima pasta que criamos é a 'routes', que contém todas as rotas, urls de nosso site. Importamos também os métodos 'CRUD', presentes na pasta 'controllers', para associá-los as rotas definidas.
Uma outra estratégia que utilizamos foi a de importar as rotas referentes ao outro modelo, uma espécie de 're-roteamento':
-- const [contante / variavel de roteamento] = require('./[roteamento do modelo]');
-- router.use('/:[parâmetro do outro modelo]/[url ou rota deste modelo]', [contante / variavel de roteamento]);

Como estamos utilizando re-roteamento, devemos adicionar uma configuração a variável criada no modelo que irá receber o roteamento:
-- const [variavel / constante] = express.Router({ mergeParams: true });

Podemos utilizar o 'router' do 'express' de diversas formas, como:
-- router.get('/', (req, res) => {}); (ou '.post()')
Usamos os parâmetros como em outras linguagens
-- router.route('/[url ou rota]/:[parâmetro1]/:[parâmetro2]').get([método CRUD de GET]);

. OBS: Por padrão, o 'express' nos permite passar um erro pelo 'next()', nos enviando um html contendo o erro. Podemos utilizar o mesmo princípio, mas alterando o 'handling' (para isso criamos o arquivo de 'erro' na pasta de middlewares, e uma extensão da classe na pasta utils, 'error.js').
Uma das outras formas de se lidar com o erro, é criando um novo objeto de erro, como abaixo:
next(new ErrorHandler(`Não foi possível identificar o Bootcamp de ID num: ${req.params.id}`, 404));
Usando o 'catch' apenas, poderíamos escrever:
next(err);

No curso vemos o uso da biblioteca 'morgan', que nos disponibiliza um log mais completo do processamento de nosso projeto, além disso, também nos permite modificar a cor e estilo dos textos que nos são apresentados no log do servidor, como erro vermelho e em itálico por exemplo, mas optamos por não utilizar a mudança de cores do texto no projeto, apenas a parte de log.

Posteriormente criamos a pasta que contém os 'middlewares', que são os módulos responsáveis por alterar os dados durante o processamento (por isso que 'middle'). 
O módulo 'async' faz o que já mencionamos anteriormente, nos permite executar o código de forma assincrona e retornar uma promisse.
O 'error.js' é uma forma de erro customizada, que é alterada de acordo com os erros que ocorreram durante o processamento.
Já o 'logger.js' é um módulo de log criado apenas para testes, neste projeto iremos utilizar o 'morgan' para isso.
É importante ressaltar que o servidor irá utilizar o middleware apenas se utilizarmos:
-- app.use([middleware])
. OBS: Lembrando que o 'app' é um objeto do express.

Existe um outro tipo de 'middleware', que pode ser chamado antes e / ou depois de um modelo / schema for salvo, atualizado no banco de dados, exemplos:

-- BootcampSchema.pre('remove', async function (next) {});
- O 'pre()' é uma chamada que será executada antes que o comando 'remove' seja executado no BD para aquele modelo, e como em todos os middlewares, passamos o 'next' também (apontando para seguir para a próxima rota, e / ou middleware). Assim como o pre temos o 'post()', que possui a lógica similar, mas é executado no momento momento do post.

-- BootcampSchema.virtual('courses', {});
- Já o 'virtuals()' é um 'populate reverso', isso é interessante quando temos uma tabela linkada a outra, pois quando, no caso, o bootcamp for atualizado, ele irá gerar uma lista com os dados dos seus respectivos courses.

O schema do Mongoose também possui algumas funções próprias, como:
1) O 'aggregate', que retorna uma promisse, recebe um pipeline '[]', que nada mais é que uma sequência de comandos que deve ser seguida (Exemplo no modelo 'Course.js'), e que no fim nos gera um objeto segundo essa sequência de comandos executada no BD;
2) O 'constructor', como nas demais linguagens, nos permite executar algo no momento da criação do objeto, de sua inicialização. (Exemplo no modelo 'Course.js');
3) [model].isModified('[campo do modelo]'), que verifica se o campo informado foi alterado na respectiva instância (Exemplo no modelo 'User.js');

Nos métodos CRUD presentes no 'controllers.js', podemos disponibilizar 'queries' dentro da nossa URL (devemos começar a query por '?', separando os campos com '&'), para que o mongoose use no 'find()', procurando os registros dentro da base de dados.
Cabe mencionar, que estas queries precisam de uma "tradução" para serem usadas pelo JSON, por exemplo, devemos inserir o caractere '$' em casos de "menor do que X valor", pois o mongoose não realiza tal procedimento, e considera que o valor informado é uma ID, causando erro.
. OBS: Para mais detalhes quanto ao uso de Query, ver módulo 'middlewares' > 'advancedResults.js'.
Para os casos como o 'select' e 'sort', como estes não são campos do schema, devemos retirá-los da query principal (que apenas realiza os matches por campo), eles seriam separados, e incindiriam nos bootcamps encontrados pelo GET. Caso não tenha um 'select' e 'sort' na URL, o 'GET' funcionaria normalmente.

Colocamos as 'queries' em um módulo middleware para facilitar o seu uso em demais métodos, do jeito que foi feito, optamos por executar o middleware através do módulo de roteamento, utilizando o objeto 'res.advancedResults' para obtenção dos resultados nos métodos presentes nos 'controllers'.

As 'Queries' que foram criadas são as seguintes (lembrando que devemos ter o '?' no começo, e '&' para separar as queries):
1) [campo do modelo]=[valor]
- Retorna os registros que possuem o respectivo valor no campo informado;
2) select=[campo 1 do modelo],[campo 2 do modelo],[...]
- Retorna todos os registros encontrados anteriormente, mas contendo apenas os campos selecionados;
3) limit=[int]
- Limita a quantidade de registros que aparece no resultado;
4) page=[int]
- Retorna os registros encontrados anteriormente, mas na segunda segunda página da paginação criada;

O Mongoose aceita alguns comandos para podermos identificar alguns dados em nosso banco, exemplos:
-- $match: {bootcamp: bootcampId}
Feito no modelo do 'Course.js'. O match irá procurar a igualdade entre o campo que está no schema 'bootcamp' e o id que foi informado no chamar do método estático, 'bootcampId'.
. OBS: Em diversas ocasiões, o Mongoose utiliza o caractere '$' para identificar e executar um comando, em alguns casos precisamos adicionar o '$' para que o Mongoose execute o comando adequadamente.

Para podermos lidar com os modelos criados pelo Mongoose podemos usar, sendo todos os métodos assincronos também:
1) [model].findById(req.params.[id])
- que traz todos os dados identificados no banco pelo id especificado;
2) [model].findByIdAndUpdate(req.params.[id], req.body, {
    new: true,
    runValidators: true});
- Nos permite atualizar os dados daquele item, pelo corpo que foi enviado na requisição HTTP de 'PUT' enviada. O terceiro parâmetro são as configurações, no caso, 'new' para que sejam retornados os dados atualizados, e o 'runvalidator' para que sejam executadas as validações nos dados que foram enviados no body da requisição; 
3) [model].findByIdAndDelete(req.params.[id]); ou [model].remove();
- Fazem a mesma coisa, que é excluir aquele item que foi identificado pelo id, no BD;
4) Course.findById(req.params.id).populate({
    path: 'bootcamp',
    select: 'name description'
});
- O 'populate', nos permite trazer as informações do BD referentes a tabela que queremos, considerando que elas tenham a ligação por chave primária. No exemplo acima, foi possível trazer os dados do bootcamp através do modelo de cursos, uma vez que os dois possuem ligação (Exemplo no middleware 'advancedResults.js');
. OBS: Cabe mencionar que o populate pode ser simples, especificando apenas o modelo, como 'bootcamp', ou se quisermos algo mais específico, devemos passar um objeto, como no exemplo acima.
5) [model].find()
- Procura os registros com o que for informado, podemos criar uma query e passar para o find, por exemplo;
6) [model].isModified('[campo do modelo]');
- Verifica se o campo informado foi alterado na respectiva instância;

Instalamos o app 'express-fileupload'. Criamos no 'controllers' > 'bootcamps' a funcionlidade de upload de fotos para o bootcamp que for informado. Em seguida criamos a respectiva rota para a funcionalidade, testando por fim no Postman.
Configuramos o body no Postman como 'form-data', criamos o campo 'file', com o tipo 'file', e selecionamos a imagem para enviar ao servidor.
. OBS: Assim como em outros middlewares, é importante que inicializemos o app 'fileupload' antes da criação das rotas, no módulo 'server.js', se não sempre teremos o erro de envio de fotos.
Em nosso arquivo de 'enviroment', criamos o local onde o arquivo deve ser armazenado.

Durante a configuração do middleware de upload de arquivos, renomeamos o arquivo enviado com um nome customizado, para evitar sobrescrita de arquivos, que por ventura tenham o mesmo nome no diretório do servidor destino.
Para assegurar que a extensão do arquivo seja parte do seu nome, usamos a biblioteca nativa do NodeJS 'path', exemplo de um dos métodos:
-- path.parse(file.name).ext

Para executarmos a função de upload da imagem, podemos usar o método builtin 'mv':
-- file.mv(`${process.env.FILE_PATH_UPLOAD}/${file.name}`, [callback para armazenar o arquivo]);
Criamos a pasta onde configuramos no enviroment, e definimos a pasta como sendo o local de arquivos estáticos, dentro do módulo 'server.js', usamos o path para concatenar a raiz da pasta do projeto:
-- app.use(express.static(path.join(__dirname, 'public')));

Nós temos um REST full API até o momento, mas agora precisamos adicionar o conceito de segurança, de usuários, não só para isso instalamos os apps: 'jsonwebtoken' e 'bcryptjs'.

Criamos o 'model' > 'User.js', e criamos o seu schema, roteamento ('auth' e 'users'), e os seus respectivos controllers.
'auth' se refere a autenticação, registro, trocas de senha.
Já 'users' seria as funcionalidades de admin, criar, atualizar e deletar um usuário.
Criamos o método de registro de um novo usuário no módulo: 'controllers' > 'auth.js', e implementamos a criptografia da respectiva senha usando o 'bcryptjs'.

. OBS: Existe uma biblioteca no Node chamada 'bcrypt', mas achamos que esta apresenta muitos erros, ainda mais em ambientes Windows, por isso a seleção da outra versão do app.

O 'bcryptjs' possui algumas funcionalidades próprias, como:
-- const salt = bcrypt.genSalt(10);
Podemos gerar um 'salt' para a encriptação da senha, quanto maior o número especificado maior a segurança da encriptação, e maior o tamanho do seu armazenamento... Por isso é recomendado utilizar o '10'.
-- bcrypt.hash(this.password, salt);
Geramos o password encriptado utilizando o 'salt', complexidade gerado anteriormente.

Ao registrarmos um novo usuário, queremos enviar um 'JSON Web Token' (ou 'JWT') como confirmação, para isso, criamos um método (não é middleware) dentro de 'models' > 'User.js'. O 'JWT' é um código que é separado em 3 partes, o primeiro é o 'header' contendo o algoritmo e o seu tipo, a segunda parte são os dados processados do usuário, e a terceira parte é a assinatura de verificação, com detalhamento da segurança de encriptação e etc. Lembrando que todos esses dados descriptados são em formato JSON.

. OBS: Não criamos um middleware para lidar com a geração do token, para isso, utilizamos o 'methods', que nada mais é que uma função que pode ser executada por uma instância do modelo, diferente do 'statics', que é executado antes da instanciação do modelo.

Usamos o método 'sign' do JWT, que precisa do 'payload' (segunda etapa) a ser enviado, e o segredo para encriptação, que foi inserido no arquivo de configuração do projeto.

Seguindo, agora iremos implementar o método de login do usuário, usamos o método do 'mongoose', 'findone()', para nos retornar um usuário com o email especificado no request, com essas informações, usamos o método builtin do 'bcrypt', ('.compare([password inserido], this.[campo de password do modelo])'), para validar a senha encriptada do usuário no BD.

A forma de login é pelo envio do token gerado, em um primeiro momento enviamos o token pelo 'res.status', mas queremos que o browser armazene esse dado para demais solicitações privadas, uma forma de ser feita é pelo 'local storage', embora não seja a mais segura, a forma que iremos usar é a da criação de um cookie.

Para a utilização de cookies, usamos a biblioteca 'cookie-parser'. Criamos uma função específica para criação de cookies, em 'controllers' > 'auth.js'.

O próximo passo é requerer este token dos usuários cadastrados nas rotas, ou métodos que são privados. Para isso criamos o arquivo 'middleware' > 'auth.js'.
Por convenção, a ideia é obter da requisição HTTP (Postman), um item no cabeçalho chamado 'Authorization', com o conteúdo do token do usuário que está logado:
-- 'Bearer [JSON Token]'.
Após verificarmos a existência do token na requisição, e / ou da sua existência como um cookie no browser (implementação no ambiente de produção), devemos validar o seu conteúdo, ou 'payload', com o método:
-- 'jwt.verify([token a ser analisado], [segredo usado])';
Por fim, criamos o 'usuário' na requisição, com os dados do usuário identificado no BD:
-- req.user = await User.findById(tknDecoded.id);

Para proteger as rotas com o nosso novo middleware, precisamos primeiro trazer o método criado 'protect', e passá-lo como o primeiro parâmetro das rotas geradas.

Com o usuário logado, criamos um novo método de 'verificar o usuário logado atual', em 'controllers' > 'auth.js'.

Até o momento, estamos fizendo o login do usuário de forma manual no Postman, criando um item de 'Authorization' dentro do 'header' das solicitações, entretanto, o Postman possui outras ferramentas que podemos usar para automitizar o processo.
Dentro da rota de login e de registro do postman, na aba 'Tests', podemos criar mais uma variável de ambiente contendo o valor do token obtido do usuário que acabou de ser logado no sistema.
Criação da variável:
-- pm.enviroment.set("token", pm.response.json().token)
Agora, com o usuário logado automaticamente, podemos usar a aba 'Authorization' do postman, e usar a autenticação por 'Bearer' e indiciar nossa variavel como parâmetro.

Um outro procedimento de segurança que deve ser implementado é a segregação de função dentro do sistema, ou seja, os acessos dos usuários 'users' são diferentes dos usuários 'publishers', que são diferentes dos 'admins' (feito em 'middleware' > 'auth.js').
. OBS: Na implementação usamos o conceito de 'higher order function', que é uma função que retorna ou recebe uma outra função como argumento.
A ideia da função 'authorize' é passá-la as rotas, com as informações de quais roles que queremos que o acesso seja liberado, as demais roles não serão aceitas.

Outra implementação que pode ser interessante é a criação de um relacionamento entre os bootcamps e os usuários, de forma que podemos criar a ideia de pertencimento dos usuários com as suas publicações.
No caso, saberemos quais usuários criaram quais bootcamps.
Em 'models' > 'Bootcamp.js', criamos um campo representando o respectivo usuário, campo similar ao que foi criado para linkar 'Course' com o 'Bootcamp'.
Esta inserção também foi feita no método de criação de bootcamp, em 'controllers' > 'bootcamps', criando automaticamente o link do usuário logado com o bootcamp que está sendo criado. Também fazemos um check quanto a uma outra necessidade de desenvolvimento, que apenas um 'admin' seja capaz de publicar mais de um bootcamp, um 'publisher' só pode um.
Outra alteração necessária foi a da inclusão do modelo de 'User' dentro do módulo do 'seeder.js', que antes ignorava as informações dos usuários.

Uma outra implementação de segurança seria limitar o acesso dos usuários aos bootcamps e cursos que não foram criados por eles mesmos, a ideia é que apenas o usuário criador dos bootcamps e dos cursos podem alterá-los posteriormente. Para isso, alteramos os métodos de 'update', 'delete' e 'photo upload' em 'controllers', para ambos 'bootcamps' e 'courses'.

- OBS: Desabilitamos o GEOCODE pois está apresentando um erro de certificado, caso o erro seja solucionado, a funcionalidade será reintegrada.

A próxima funcionalidade que queremos adicionar ao projeto é a possibilidade de resetar a senha dos usuários, a ideia é que o usuário envie um e-mail requisitando o reset da senha.
A funcionalidade ficará dentro de 'controllers' > método 'forgotPassword'. Usaremos o e-mail em que o usuário enviou a requisição para identifica-lo na base.
Dentro de 'models' > 'User', iremos criar uma funcionalidade de geração de token para este caso de reset de senha, este método será utilizado pelo controller para a funcionalidade. Usaremos a biblioteca 'crypto' para criptografar o token de solicitação de troca de senha gerado e definimos o tempo de 10 minutos para a expiração do token, exemplo de utilização do 'crypto':
-- crypto.randomBytes([numero de bytes para gerar]).toString('[tipo de string]');
Neste caso, devemos informar o tamanho, em bytes, do token a ser gerado, este método nos retorna um buffer, que devemos traduzir em uma string.
-- crypto.createHash('[algoritmo de criptografia]').update([token gerado]).digest('[tipo de string]');
Comando de criptografia relativo ao token gerado.

Além da geração do token relativo ao reset de senha, também iremos enviar um e-mail de confirmação ao usuário, a biblioteca que iremos usar para isso é o 'nodemailer', para testar o nosso serviço, iremos usar o 'mailtrap', que é um servidor falso de smtp.
Primeiro, adicionamos algumas configurações básicas em nosso 'config.env', e criamos o nosso módulo central da funcionalidade, que está em 'utils' > 'sendEmail.js'.
Por fim atualizamos o método 'forgotPassword' em 'controllers' para enviar o e-mail ao usuário solicitante do reset de senha.

30_05_2022
A próxima implementação é a de reset do usuário, dentro de: 'controllers' > 'auth.js', método 'resetPassword'. Precisamos do módulo do 'crypto' para podermos realizar essa tarefa, ele foi importado no início do arquivo, como os demais.
A ideia neste caso é de resetar o usuário referente ao token gerado e passado por parâmetro via API. Outro ponto que queremos garantir é que a solicitação do reset senha maior que hoje, para garantir que a solicitação seja recente (lembrando o código: '$gt: Date.now()', '$gt' significa 'greater then', e o 'Date.now()' apenas pega a data atual).
Para testar a implementação usamos o 'Postman' para enviar o pedido de reset de senha, método 'forgotPassword', e depois pegamos o e-mail de reset que foi enviado para o nosso 'mailtrap' vinculado ao nosso usuário do GitHub.
A URL presente no e-mail deve ser colocada novamente no 'Postman', método '', onde enviamos nosso JSON com o body apresentando nossa nova senha.
Mas para que o processo funcione, devemos adicionar a nova funcionalidade a rota 'auth.js'.

01_06_2022
Desta vez iremos criar uma nova rota para alterar os dados do usuário, que será um método dentro de 'controllers' > 'auth.js', a alteração da senha do usuário foi feita em uma rota diferente desta.
Como queremos que apenas os dados de 'nome' e 'e-mail' do usuário possam ser alterados, iremos usar a desconstrução do request para pegar exatamente esses dados. Se passassemos o 'req.body' todo, até a senha poderia ser alterada assim, mas para ela queremos algumas medidas de segurança, implementadas em seu próprio método.
. OBS: Também utilizamos o middleware 'protect' neste método http.
. OBS2: No 'Postman' devemos colocar a opção de 'Authorization' para utilizar o 'token' que é gerado no momento do login do usuário, a opção para isso é a 'Bearer Token'.

Agora iremos criar o método de update da senha do usuário.
Para este item, queremos que o usuário informe tanto a senha antiga quanto a senha nova, para então podermos mudar a sua senha para a que foi requisitada, para isso usamos:
-- .select('+password')
. O 'select' fica inativo se não utilizarmos.
Para validação utilizamos o método de 'matchPassword' próprio do objeto 'usuário':
-- if(!(await user.matchPassword(req.body.currentPassword))) {
. O método em questão é assincrono, por isso devemos esperar sua resposta.
Por fim enviaremos um token respectivo a troca de senha.

02_06_2022
A última implementação referente a autenticação será a de CRUD (Create, Read, Update, Delete) dos usuários da API, este acesso será realizado por um admin apenas.
Nas pastas 'routes' e 'controllers', criamos o módulo 'users.js'. Dentro de 'controllers', criamos os métodos, onde todos serão privados e só para admins: 
1) GET de todos os usuários do sistema;
2) GET de um usuário;
3) CREATE de um novo usuário, diferente do registro feito no módulo de autenticação;
Também não devemos esquecer de trazer a nova rota para o módulo principal, 'server.js'.
Usamos novamente o middleware 'advancedResults.js' para enviar os resultados. 
Utilizamos uma estratégia para preencher as autenticações, sem precisar copiar o código diversas vezes, como foi feito anteriormente:
-- router.use(protect);
. Assim todas as rotas definidas abaixo usarão o protect e o authorize especificado.
Lembrando que esses middlewares de proteção precisam que o 'postman' tenha o 'authorize' como 'bearer token', para que este possa identificar o usuário como sendo admin.
. OBS: A criação de um novo usuário pelo admin também deve encriptar a senha do usuário informada no corpo da solicitação do 'postman', visto que utilizamos o modelo de 'user' que possui o middleware de encriptação de senha.

03_06_2022
Agora seguiremos com a criação do recurso de reviews, para isso precisamos criar os 'models', 'controllers' e 'routes' respectivos.
Lembrando que iremos utilizar o 'merge parameters' com os bootcamps que temos, visto que uma review estará sempre atrelada a um.
. OBS: A opção de merge deve estar abilitada na rota de reviews e a rota de reviews deve ser importada pela de bootcamps.

06_06_2022
A próxima funcionalidade que queremos é a de obtenção dos reviews específicos por id. Um outro ponto que queremos atualizar é a dos seeders, onde queremos que os reviews pré-estabelecidos sejam adicionados ao nosso banco de dados. 